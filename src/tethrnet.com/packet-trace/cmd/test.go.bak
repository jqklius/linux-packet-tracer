// Copyright 2016 Kinvolk
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"os"

	bpf "github.com/iovisor/gobpf/bcc"
)

import "C"

const source string = `
#include <uapi/linux/ptrace.h>
#include <uapi/linux/ip.h>
#include <uapi/linux/tcp.h>
#include <bcc/proto.h>
#include <net/inet_sock.h>
#include <linux/netfilter_ipv4.h>
#include <linux/netfilter/x_tables.h>


typedef struct {
    u8 ver_ihl;
    u8 tos;
    u16 tot_len;
    u16 id;
    u16 frag_off;
    u8 ttl;
    u8 prot;
    u16 checksum;
    u32 saddr;
    u32 daddr;
} ip_hdr; 

int kprobe__ip_rcv(struct pt_regs *ctx,struct sk_buff *skb){
	unsigned char * hdr_ = skb->head + skb->network_header;
	ip_hdr *hdr = (ip_hdr*)hdr_;
	if (hdr->prot==17) {
		
	}
}
`

type chownEvent struct {
	Pid         uint32
	Uid         uint32
	Gid         uint32
	ReturnValue int32
	Filename    [256]byte
}

func main() {
	m := bpf.NewModule(source, []string{})
	defer m.Close()

	chownKprobe, err := m.LoadKprobe("kprobe__sys_fchownat")
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to load kprobe__sys_fchownat: %s\n", err)
		os.Exit(1)
	}

	err = m.AttachKprobe("sys_fchownat", chownKprobe)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Failed to attach kprobe__sys_fchownat: %s\n", err)
		os.Exit(1)
	}

}
